"""Unit tests for the linear (map-tensor) models (generated by o3).

Each test checks both numerical correctness and output shape.
"""

import jax.numpy as jnp
import numpy as np

from jaxinv.model.linear import (
    type1,
    type2,
    type3,
    type4,
    type5,
    type6,
    type7,
)


def _allclose(a, b, *, rtol=1e-7, atol=0.0):
    """Convenience wrapper around ``numpy.allclose`` for JAX arrays."""
    return np.allclose(np.asarray(a), np.asarray(b), rtol=rtol, atol=atol)


# --------------------------------------------------------------------------
# Type‑1
# --------------------------------------------------------------------------
def test_type1_basic():
    """Verify :pyfunc:`linear_models.type1`.

    The test uses a 2x2 weight matrix and a 2-vector whose dot
    product can be computed by hand.

    Raises
    ------
    AssertionError
        If the computed result differs from the expected one.
    """
    gw = jnp.array([[1, 2], [3, 4]])
    mv = jnp.array([5, 6])  # (Nj,)
    expected = jnp.array([17, 39])  # [1*5+2*6, 3*5+4*6]
    result = type1(gw, mv)
    assert result.shape == (2,)
    assert _allclose(result, expected)


# --------------------------------------------------------------------------
# Type‑2
# --------------------------------------------------------------------------
def test_type2_basic():
    """Verify :pyfunc:`linear_models.type2` with a 2x2x3 example."""
    gw = jnp.array([[1, 0], [0, 1]])  # (Ni=2, Nj=2)
    sm = jnp.array([[1, 2, 3], [4, 5, 6]])  # (Nk=2, Nl=3)
    mm = jnp.array([[7, 0], [0, 8]])  # (Nj=2, Nk=2)

    expected = jnp.array(
        [[7, 14, 21], [32, 40, 48]]  # row‑0 → [7,0] @ sm  # row‑1 → [0,8] @ sm
    )
    result = type2(gw, sm, mm)
    assert result.shape == (2, 3)
    assert _allclose(result, expected)


# --------------------------------------------------------------------------
# Type‑3
# --------------------------------------------------------------------------
def test_type3_basic():
    """Verify :pyfunc:`linear_models.type3` (Hadamard-sum model)."""
    gw = jnp.array([[1, 2], [3, 4]])
    mm = jnp.array([[5, 6], [7, 8]])
    # Row‑wise sum of element‑wise products
    expected = jnp.array([1 * 5 + 2 * 6, 3 * 7 + 4 * 8])
    result = type3(gw, mm)
    assert result.shape == (2,)
    assert _allclose(result, expected)


# --------------------------------------------------------------------------
# Type‑4
# --------------------------------------------------------------------------
def test_type4_basic():
    """Verify :pyfunc:`linear_models.type4` with a 2x2x2 tensor."""
    gw = jnp.array([[1, 0], [0, 1]])  # (Ni=2, Nj=2)
    sm = jnp.array([[1, 0], [0, 2]])  # (Nk=2, Nl=2)
    mt = jnp.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])  # (Ni, Nj, Nk)
    # Expected: einsum("ij,ijk,kl->il", gw, mt, sm)
    # → keep own slice, multiply last dim by sm diag
    expected = jnp.array(
        [
            [1 * 1 + 2 * 0, 1 * 0 + 2 * 2],  # first Ni row
            [7 * 1 + 8 * 0, 7 * 0 + 8 * 2],
        ]  # second Ni row
    )
    result = type4(gw, sm, mt)
    assert result.shape == (2, 2)
    assert _allclose(result, expected)


# --------------------------------------------------------------------------
# Type‑5
# --------------------------------------------------------------------------
def test_type5_basic():
    """Verify :pyfunc:`linear_models.type5` (multi-weight, matrix case)."""
    mgw = jnp.ones((2, 2, 2))  # all ones
    sm = jnp.eye(2) * 2.0  # double identity
    mm = jnp.arange(8).reshape(2, 2, 2) % 3  # small integers

    expected = jnp.einsum("ijk,ijk,kl->il", mgw, mm, sm)
    result = type5(mgw, sm, mm)
    assert result.shape == (2, 2)
    assert _allclose(result, expected)


# --------------------------------------------------------------------------
# Type‑6
# --------------------------------------------------------------------------
def test_type6_basic():
    """Verify :pyfunc:`linear_models.type6` (multi-weight, tensor case)."""
    mgw = jnp.array([[[1, 0], [0, 1]]])  # (Ni=1, Nj=2, Nk=2)
    sm = jnp.array([[1, 2], [3, 4]])  # (Nk=2, Nl=2)
    mt = jnp.array([[[5, 6], [7, 8]]])  # (Ni=1, Nj=2, Nk=2)

    expected = jnp.einsum("ijk,ijk,kl->il", mgw, mt, sm)
    result = type6(mgw, sm, mt)
    assert result.shape == (1, 2)
    assert _allclose(result, expected)


# --------------------------------------------------------------------------
# Type‑7
# --------------------------------------------------------------------------
def test_type7_basic():
    """Verify :pyfunc:`linear_models.type7` (spectral weight model)."""
    sgw = jnp.array(  # (Ni=2, Nj=2, Nl=3)
        [[[1, 0, 0], [0, 1, 0]], [[0, 0, 1], [1, 0, 0]]]
    )
    sv = jnp.array([1, 2, 3])  # (Nl,)
    mv = jnp.array([4, 5])  # (Nj,)

    expected = jnp.einsum("ijl,j,l->il", sgw, mv, sv)
    result = type7(sgw, sv, mv)
    assert result.shape == (2, 3)
    assert _allclose(result, expected)
